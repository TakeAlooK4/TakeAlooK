package com.bit.tak.controller;

import java.util.List;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.thymeleaf.engine.AttributeName;

import com.bit.tak.model.repository.CartRepo;

import com.bit.tak.model.repository.ProductRepo;
import com.bit.tak.model.vo.member.User;
import com.bit.tak.model.vo.product.Cart;
import com.bit.tak.model.vo.product.Product;






@Controller
public class ProductController {

	@Autowired
	private ProductRepo productRepo;
	
	@Autowired
	private CartRepo cartRepo;

	
	
	@RequestMapping("/productMainPage")
	public String productMainPage(Model model) {
		
		model.addAttribute("productList", productRepo.findAll());
		

			//session 받을 자리 
			//섹션에 닉네임 등록하기
			// 나중에 지워 줄 것! ( 헤더를 만든 후에는 )
		
		return "product/productMainPage";
	}
	
	@RequestMapping("/productDetailPage")
	public String productDetailPage(Model model, String prNo) {
		
		model.addAttribute("product",productRepo.findById(prNo).get());

		
		return "product/P_detail_Page";
	}
	
	
	
	@RequestMapping("/insertCart.do")
	@ResponseBody
	public String insertCart(Model model, String prNo,Cart cart) {
		
		Product product = productRepo.findById(prNo).get();
		cart.setProduct(product);

		User user = new User();
		user.setNickname("sara");
		
		cart.setUser(user);
		
		cartRepo.save(cart);
		return "success";
	}
	
	

	@RequestMapping("/deleteList.do")
	@ResponseBody
	public String deleteList(Cart cart, @RequestParam List<Integer> cartNo) {
		
		
		cartRepo.deleteById(cart.getCartNo());

		return "success";
	}

	
	/*
	 * cart 안에 cartVo data 들어 있음
	 * 장바구니에 넣으면 뷰 에 표현 된게 하고 싶음
	 * 기존에 받은 cartAmount 의 개수를 장바구니  내에서 수정하고싶음
	 * 수량 변경 후 '수량변경' 버튼을 누르면 수량 변경됨
	 * cartAmount 를 바꾸는 순간 가격도 실시간으로 변경 하게 하고 싶음
	 * 장바구니에서 결제 하고  싶음
	 * 결제 하고 나면 장바구니에 있는 데이터들을 삭제 시킴
	 * 
	 */
	@RequestMapping("/productCartPage")
	public String CartPage(Model model,Cart cart,User user, String nickname) {

		
		model.addAttribute("cartList",cartRepo.findAll());

		User user1 = new User();
		cart.setUser(user1);
	
		List<Cart> list = cartRepo.listCart(user1);
		
		int sumMoney = cartRepo.sumMoney(user1);
		
		int fee = 3000;
		if (sumMoney >= 40000) {
			fee = 0;
		}
		
		model.addAttribute("sumMoney", sumMoney);
		model.addAttribute("fee", fee);
		model.addAttribute("sum", sumMoney + fee);
		model.addAttribute("list", list);
		model.addAttribute("count", list.size());

		return "product/Cart";
	}

	
	
	/*
	 *  이 맵핑은 내가 넣은 물품을 합치는 과정
	 *  특히 cartAmount 개수를 합쳐서 디비로 보내주어
	 *  cart table에 cartNo, nickname, sumCartAmount 가 재 정의 되어 담겨져 있다.
	 *  
	 */
	@RequestMapping("/cartUpdate.do")
	@ResponseBody
	public String update(Cart cart, @RequestParam List<Integer> cartAmount, @RequestParam List<Integer> cartNo) {
		
		User user = new User();
		user.setNickname("sara");
		 cart.setUser(user);
		
/////////////////////////////////////////////////////////////////////////////		 
		 if (user != null) {
				for (int i = 0; i < cartNo.size(); i++) {
					if (cartAmount.get(i) == 0) {
						cartRepo.deleteById(cartNo.get(i));
					} else {
						cart.setUser(user);
						cart.setCartNo(cartNo.get(i));
						cart.setCartAmount(cartAmount.get(i));
						Cart cartList = cartRepo.findById (cart.getCartNo()).get();
						cartList.setCartAmount(((Cart) cart).getCartAmount());
						cartRepo.save(cartList);
						
					}
				}
			}
		
		return "redirect:productCartPage";
	}
	
	
}
