
package com.bit.tak.controller;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.util.List;

import javax.servlet.http.HttpSession;
import javax.swing.text.html.HTML;

import org.apache.commons.io.IOUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.SessionAttributes;
import org.springframework.web.multipart.MultipartFile;
import org.thymeleaf.engine.AttributeName;

import com.bit.tak.model.repository.CartRepo;
import com.bit.tak.model.repository.MemberRepo;
import com.bit.tak.model.repository.P_ageRepo;
import com.bit.tak.model.repository.P_codeRepo;
import com.bit.tak.model.repository.P_fpRepo;
import com.bit.tak.model.repository.P_mrmRepo;
import com.bit.tak.model.repository.P_qnaRepo;
import com.bit.tak.model.repository.P_resultValueRepo;
import com.bit.tak.model.repository.PaymentRepo;
import com.bit.tak.model.repository.ProductRepo;
import com.bit.tak.model.repository.ProductReviewRepo;
import com.bit.tak.model.vo.admin.P_Qna;
import com.bit.tak.model.vo.admin.P_Review;
import com.bit.tak.model.vo.member.Company;
import com.bit.tak.model.vo.member.Muser;
import com.bit.tak.model.vo.product.Cart;
import com.bit.tak.model.vo.product.P_payment;
import com.bit.tak.model.vo.product.P_resultValue;
import com.bit.tak.model.vo.product.Product;
import com.bit.tak.model.vo.productCode.P_Age;
import com.bit.tak.model.vo.productCode.P_Code;
@SessionAttributes("company")
@Controller
public class ProductController {
	private static final Logger logger = LoggerFactory.getLogger(ProductController.class);

	@Value("${file.uploadPath}")
	String uploadPath;

	@Autowired
	private ProductRepo productRepo;

	@Autowired
	private CartRepo cartRepo;

	@Autowired
	private ProductReviewRepo productReviewRepo;

	@Autowired
	private P_resultValueRepo resultValueRepo; 

	@Autowired
	private PaymentRepo paymentRepo;
	@Autowired
	private P_qnaRepo qnaRepo;
	//진선
	@Autowired
	private P_codeRepo pCodeRepo;
	@Autowired
	private P_ageRepo pAgeRepo;
	@Autowired
	private P_fpRepo pfpRepo;
	@Autowired
	private P_mrmRepo pMrmRepo;

	private Company company;
	//ddd
	/*
	 * 강아지를 누르면 강아지 데이터
	 * 고양이를 누르면 고양이 데이터 불러오기
	 * ==============================
	 * 데이터를 어떤 기준으로 불러와야 할까? ,,,,
	 * 대안1. productRepo.findById (강아지)
	 *       productRepo.findById (고양이)
	 *       로 정해서 버튼에 ajax를 써서 버튼에 어떠한 것을 해주어서
	 *       원하는 데이터를 불러 온다?!?!....
	 */

	@RequestMapping("/productMain")
	public String productMain(Model model,String animalType, String pCode,HttpSession session, String nickname) {

		session.setAttribute("nickname", nickname);
		//model.addAttribute("productList", productRepo.findAll());
		System.err.println(nickname);
		model.addAttribute("productList", productRepo.findAll());
		model.addAttribute("bueatyAll", productRepo.bueatyAllList(pCode));
		model.addAttribute("snackAll", productRepo.snackAllList(pCode));
		model.addAttribute("feedAll", productRepo.feedAllList(pCode));
		model.addAttribute("orderAll", productRepo.orderAllList(pCode));
		//session 받을 자리 
		//섹션에 닉네임 등록하기
		// 나중에 지워 줄 것! ( 헤더를 만든 후에는 )

		return "product/productMainPage";
	}
	//----------test 맵핑 ------------
	@RequestMapping("/productMainTest")
	public String productMainTest(Model model,String animalType, String pCode) {

		//model.addAttribute("productList", productRepo.findAll());

		model.addAttribute("productList", productRepo.findAll());
		model.addAttribute("bueatyAll", productRepo.bueatyAllList(pCode));
		model.addAttribute("snackAll", productRepo.snackAllList(pCode));
		model.addAttribute("feedAll", productRepo.feedAllList(pCode));
		//session 받을 자리 
		//섹션에 닉네임 등록하기
		// 나중에 지워 줄 것! ( 헤더를 만든 후에는 )

		return "product/productMainPageTest";
	}

	@RequestMapping("/dogInsert.do")
	public String dogPage(Model model, String animalType) {

		model.addAttribute("productListDog1", productRepo.feedList("D"));	
		//model.addAttribute("productListDog2", productRepo.feedList(animalType));

		return "product/productMainPageDog";
	}


	@RequestMapping("/catInsert.do")
	public String catPage(Model model, String animalType) {

		model.addAttribute("productListCat1", productRepo.feedList("C"));	
		//model.addAttribute("productListCat2", productRepo.feedList(animalType));
		return "product/productMainPageCat";
	}

	//dog snack 에 관한 맵핑
	@RequestMapping("/productListDog.do")
	public String dogSnack(Model model, String animalType, String pCode1,String pCode2,String pCode3) {

		model.addAttribute("productListDog", productRepo.proList(animalType, pCode1,pCode2,pCode3));

		return "product/productMainPageDog";
	}

	@RequestMapping("/productListCat.do")
	public String catSnack(Model model, String animalType, String pCode1,String pCode2,String pCode3) {

		model.addAttribute("productListCat", productRepo.proList(animalType, pCode1,pCode2,pCode3));

		return "product/productMainPageCat";
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////	
	@RequestMapping("/productDetailPage")
	public String productDetailPage(Model model, int prNo,HttpSession session,String nickname) {

		model.addAttribute("product",productRepo.findById(prNo).get());

		return "product/P_detail_Page";
	}



	@RequestMapping("/insertCart.do")
	@ResponseBody
	public String insertCart(Model model, int prNo,Cart cart,Muser nickname) {

		Product product = productRepo.findById(prNo).get();
		cart.setProduct(product);
		cart.setUser(nickname);


		cartRepo.save(cart);
		return "success";
	}



	@RequestMapping("/deleteList.do")
	@ResponseBody
	public String deleteList(Cart cart, @RequestParam List<Integer> cartNo) {


		cartRepo.deleteById(cart.getCartNo());

		return "success";
	}
	@RequestMapping("/deleteListAll.do")
	@ResponseBody
	public String deleteListAll(Cart cart, @RequestParam List<Integer> cartNo) {


		//cartRepo.deleteAll();

		return "/payment";
	}

	@RequestMapping("/deletePaymentList.do")
	@ResponseBody
	public String deletePaymentList(P_resultValue Cart) {
		System.out.println(Cart.getCart());
		cartRepo.deleteByCart(Cart.getCart());

		return "success";
	}
	
	@RequestMapping("/deletePayment.do")
	@ResponseBody
	public String deletePayment(P_payment payment) {
		System.out.println(payment);
		paymentRepo.deleteById(payment);

		return "success";
	}

	/*
	 * cart 안에 cartVo data 들어 있음
	 * 장바구니에 넣으면 뷰 에 표현 된게 하고 싶음
	 * 기존에 받은 cartAmount 의 개수를 장바구니  내에서 수정하고싶음
	 * 수량 변경 후 '수량변경' 버튼을 누르면 수량 변경됨
	 * cartAmount 를 바꾸는 순간 가격도 실시간으로 변경 하게 하고 싶음
	 * 장바구니에서 결제 하고  싶음
	 * 결제 하고 나면 장바구니에 있는 데이터들을 삭제 시킴
	 * 
	 */
	@RequestMapping("/productCartPage")

	public String CartPage(Model model,Cart cart,Muser user, String nickname) {


		model.addAttribute("cartList",cartRepo.findAll());


		List<Cart> list = cartRepo.listCart(user);

		int sumMoney = cartRepo.sumMoney(user);

		int fee = 100;
		if (sumMoney >= 40000) {
			fee = 0;
		}

		model.addAttribute("sumMoney", sumMoney);
		model.addAttribute("fee", fee);
		model.addAttribute("sum", sumMoney + fee);
		model.addAttribute("list", list);
		model.addAttribute("count", list.size());

		return "product/Cart";
	}


	/*
	 *  이 맵핑은 내가 넣은 물품을 합치는 과정
	 *  특히 cartAmount 개수를 합쳐서 디비로 보내주어
	 *  cart table에 cartNo, nickname, sumCartAmount 가 재 정의 되어 담겨져 있다.
	 *  
	 */
	@RequestMapping("/cartUpdate.do")
	@ResponseBody
	public String update( Muser user,String nickname,HttpSession session,Cart cart, @RequestParam List<Integer> cartAmount, @RequestParam List<Integer> cartNo) {

		/////////////////////////////////////////////////////////////////////////////		 
		if (nickname != null) {
			for (int i = 0; i < cartNo.size(); i++) {
				if (cartAmount.get(i) == 0) {
					cartRepo.deleteById(cartNo.get(i));
				} else {

					cart.setCartNo(cartNo.get(i));
					cart.setCartAmount(cartAmount.get(i));
					Cart cartList = cartRepo.findById (cart.getCartNo()).get();
					cartList.setCartAmount(((Cart) cart).getCartAmount());
					cartRepo.save(cartList);

				}
			}
		}

		return "redirect:productCartPage";
	}

	// 상품 후기 insert 
	@RequestMapping("/reviewInsert.do")
	@ResponseBody
	public String reviewInsert(Model model,Muser nickname,Product product,P_Review review) {

		review.setProduct(product);
		review.setUser(nickname);
		System.err.println(review);
		productReviewRepo.save(review);
		model.addAttribute("reviewList",productReviewRepo.findByReviewId(product, nickname));
		return "success";
	}

	@RequestMapping("/questionInsert.do")
	@ResponseBody
	public String questionInsert(Model model,Muser user,Muser nickname,Product product,P_Qna qna) {

		System.err.println(qna);
		qnaRepo.save(qna);
		model.addAttribute("questionList", qnaRepo.findByQnaId(product, nickname));
		return "success";
	}
	
	
	
	
	
	
	@RequestMapping("/test")
	public String testPage() {


		return "product/test";
	}
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	// 상품 등록 페이지-------------------------------------------------------------------------------------------------------------------
	@GetMapping("/productEnrollment")
	public String enrollment(Model model, HttpSession session) {
		company = (Company) session.getAttribute("company");
		model.addAttribute("pCode", pCodeRepo.pCodeList("ba","고"));
		model.addAttribute("pAge", pAgeRepo.pAgeList());
		model.addAttribute("pFp", pfpRepo.pFpList());
		model.addAttribute("pMrm", pMrmRepo.pAgeList());
		model.addAttribute("company", company);

		return "product/productEnrollment";
	}
	//상품등록
	@PostMapping("/productInsert")
	public String productEnrollmentInsert(Product product) {

		productRepo.save(product);


		return "redirect:/productMain";
	}
	@ResponseBody
	@GetMapping("/pCodeSelect")
	public List<P_Code> pCodeSelect(@RequestParam(value = "pCode")String pCode,@RequestParam(value = "animalType")String animalType){
		String pName = new String();
		if(animalType.equals("D")) {
			pName = "고";
		}else {
			pName = "강";
			
		}
		return pCodeRepo.pCodeList(pCode, pName);
	}
	//결제 페이지 맵핑	
	@RequestMapping("/payment")

	public String cash(Model model,P_payment payment,P_resultValue resultValue,Muser user, String nickname) {

		model.addAttribute("cartList1",cartRepo.findAll());

		model.addAttribute("sumInfo", resultValueRepo.sumResultValue(resultValue));

		return "product/payment";
	}


	// 장바구니에서 결제 페이지로 넘어갈떄 필요한 데이터	
	@RequestMapping("/paymentInsert.do")
	@ResponseBody
	public void paymentInsert(Model model,P_resultValue result) {

		System.out.println(result);
		resultValueRepo.save(result);
		System.err.println(result);




	}
	// 결제 내역 insert 하는 부분	
	@ResponseBody
	@RequestMapping("/paymentInsert2.do")
	public String resultValue(Model model,P_payment payment,Product prNo) {

		System.err.println(payment);
		paymentRepo.save(payment);

		return "product/productMain";
	}

	// 구매 내역

	@RequestMapping("/paymentList")
	public String paymentList(Model model,String nickname) {

		model.addAttribute("paymentList", paymentRepo.findAll());
		
		List<P_payment> listInfo = paymentRepo.findAll();
		model.addAttribute("listInfo", listInfo.size());

		return "product/paymentList";
	}

	//사진----------------------------------------------------------------------------------------------
	@ResponseBody
	@RequestMapping(value ="/upload/uploadAjaxPro", method = RequestMethod.POST, produces = "text/plain;charset=UTF-8")
	public ResponseEntity<String> petUploadAjax(@RequestPart MultipartFile file ) throws Exception{ //,HttpServletRequest request //uploadPath =
		//request.getSession().getServletContext().getRealPath("/image/");

		logger.info("originalName: "+file.getOriginalFilename());
		logger.info("size: "+file.getSize());
		logger.info("contentType: "+file.getContentType());
		logger.info("uploadPath: "+uploadPath); 

		return new ResponseEntity<String>(ImageUploadUtils.imageUpload(uploadPath,file.getOriginalFilename(), file.getBytes()),HttpStatus.OK); 
		//return new ResponseEntity<String>(ImageUploadUtils.imageUpload(uploadPath,file.getOriginalFilename(), file.getBytes(),file),HttpStatus.OK); 
	}

	@ResponseBody
	@RequestMapping("/upload/displayFilePro") 
	public ResponseEntity<byte[]>displayFile(String fileName) throws Exception{

		InputStream in = null; 
		ResponseEntity<byte[]> entity = null;

		try {

			String formatName = fileName.substring(fileName.lastIndexOf(".")+1);
			MediaType mType = MediaUtils.getMediaType(formatName); 
			HttpHeaders headers = new HttpHeaders();

			in = new FileInputStream(uploadPath+fileName);

			if(mType !=null) { 
				headers.setContentType(mType);

			}else { 
				fileName = fileName.substring(fileName.indexOf("_")+1);

				headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);


				headers.add("Content-Disposition", "attachment; filename=\'"
						+new String(fileName.getBytes("utf-8"),"iso-8859-1")+"\"");

			}

			entity = new ResponseEntity<byte[]>(IOUtils.toByteArray(in),headers,HttpStatus.OK); 
		}catch(Exception e) {
			e.printStackTrace(); 
			entity = new ResponseEntity<byte[]>(HttpStatus.BAD_REQUEST); }
		finally { 
			in.close(); 
		}
		return entity; 
	}


	@ResponseBody
	@RequestMapping(value = "/upload/deleteFilePro",method = RequestMethod.POST)
	public ResponseEntity<String> deleteFile(String fileName){

		String formatName = fileName.substring(fileName.indexOf("_")+1);
		MediaType mType = MediaUtils.getMediaType(formatName);

		if(mType != null) {
			String front = fileName.substring(0,12);
			String end = fileName.substring(14);

			new File(uploadPath + (front+end).replace('/', File.separatorChar)).delete();
		}

		new File(uploadPath + fileName.replace('/', File.separatorChar)).delete();
		return new ResponseEntity<String>("deleted",HttpStatus.OK);
	}
}
