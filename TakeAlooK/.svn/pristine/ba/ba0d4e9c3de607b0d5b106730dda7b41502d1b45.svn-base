package com.bit.tak.controller;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.TimeZone;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.io.IOUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.ClassPathResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.FileCopyUtils;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import com.bit.tak.model.repository.BreedRepo;
import com.bit.tak.model.repository.PetRepo;
import com.bit.tak.model.service.MemberService;
import com.bit.tak.model.service.PetCareService;
import com.bit.tak.model.vo.member.User;
import com.bit.tak.model.vo.pet.Breed;
import com.bit.tak.model.vo.pet.Pet;

@Controller
public class PetCareController {

	private static final Logger logger = LoggerFactory.getLogger(PetCareController.class);

	@Autowired
	MemberService memberService;
	@Autowired
	PetCareService petCareService;

	@Autowired
	PetRepo petRepo;
	@Autowired
	BreedRepo breedRepo;
	

	//String uploadPath;
	
	//@Value("${spring.resources.static-locations}")
	@Value("${file.uploadPath}")
	String uploadPath;



	//제일 처음 정보창
	@GetMapping("/petCare")
	public String getPetCareList(Model model) {

		//유저정보
		User user = memberService.getMember("REALLINE");
		model.addAttribute("user",user );

		//동물 정보
		List<Pet> petInfo = petCareService.findByNickname(user);
		model.addAttribute("breed", petCareService.getBreedList());
		for (Pet p : petInfo) { 
			p.setPetAge(getAge(p.getPetBirth()));
			petRepo.save(p);
		}
		model.addAttribute("pet",petInfo);

		
		
		/*
		 * System.out.println("ffff");
		 * 
		 * for (Clinic a : clinicRepo.getSclinic("건강검진")) { System.out.println("dd");
		 * System.out.println("gggg : "+a); }
		 */
		
		return "petCare/getPetCareList";
	}

	//만 나이 구하기
	private int getAge(Date birthDay) { 
		Calendar birth = new GregorianCalendar();
		Calendar today = new GregorianCalendar();

		birth.setTime(birthDay); 
		today.setTime(petRepo.curdate()); 
		int factor = 0;

		if (today.get(Calendar.DAY_OF_YEAR) < birth.get(Calendar.DAY_OF_YEAR)) {
			factor = -1; 
		} 
		return today.get(Calendar.YEAR) - birth.get(Calendar.YEAR) + factor;
	}


	//petCode로 품종고르기
	@ResponseBody
	@GetMapping("/petCode")
	public List<Breed> petCode(Model model,@RequestParam(value="petCode")String petCode){
		List<Breed> selectPetCode =  breedRepo.findByBreedCodeStartingWith(petCode);
		System.out.println(petCode);
		return selectPetCode;
	}

	//정보등록
	@PostMapping("/petInsert")
	public String petInsert(Model model, Pet pet) {
		System.out.println("등록 바로직전");
		petRepo.save(pet);
		System.out.println("등록 후");
		return "redirect:/petCare";
	}

	//정보수정
	@PostMapping("/petUpdate")
	public String petUpdate(Model model) {

		return "redirect:/petCare";
	}

	//예제 연습란
	@GetMapping("/petDetails")
	public String details() {
		return "/petCare/petDetails";
	}


	//진단명
	@ResponseBody
	@GetMapping("/clinic")
	public List<String> clinic(){
		
		
		return null;
	}
	//의료기록등록
	@PostMapping("/medicalInsert")
	public String medicalInsert() {

		return "redirect:/petCare";
	}


	//사진----------------------------------------------------------------------------------------------
	@ResponseBody
	@RequestMapping(value ="/upload/uploadAjax", method = RequestMethod.POST, produces = "text/plain;charset=UTF-8")
	public ResponseEntity<String> petUploadAjax(@RequestPart MultipartFile file ) throws Exception{ //,HttpServletRequest request //uploadPath =
		//request.getSession().getServletContext().getRealPath("/image/");

		logger.info("originalName: "+file.getOriginalFilename());
		logger.info("size: "+file.getSize());
		logger.info("contentType: "+file.getContentType());
		logger.info("uploadPath: "+uploadPath); 

		return new ResponseEntity<String>(ImageUploadUtils.imageUpload(uploadPath,file.getOriginalFilename(), file.getBytes()),HttpStatus.OK); 
		//return new ResponseEntity<String>(ImageUploadUtils.imageUpload(uploadPath,file.getOriginalFilename(), file.getBytes(),file),HttpStatus.OK); 
	}



	@ResponseBody
	@RequestMapping("/upload/displayFile") 
	public ResponseEntity<byte[]>displayFile(String fileName) throws Exception{

		InputStream in = null; ResponseEntity<byte[]> entity = null;

		try {

			String formatName = fileName.substring(fileName.lastIndexOf(".")+1);
			MediaType mType = MediaUtils.getMediaType(formatName); HttpHeaders headers =
					new HttpHeaders();

			in = new FileInputStream(uploadPath+fileName);

			if(mType !=null) { headers.setContentType(mType);

			}else { fileName = fileName.substring(fileName.indexOf("_")+1);

			headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);


			headers.add("Content-Disposition", "attachment; filename=\'"+new
					String(fileName.getBytes("utf-8"),"iso-8859-1")+"\"");

			}

			entity = new
					ResponseEntity<byte[]>(IOUtils.toByteArray(in),headers,HttpStatus.OK); }catch
		(Exception e) { e.printStackTrace(); entity = new
		ResponseEntity<byte[]>(HttpStatus.BAD_REQUEST); }finally { in.close(); }
		return entity; }


	@ResponseBody
	@RequestMapping(value = "/upload/deleteFile",method = RequestMethod.POST)
	public ResponseEntity<String> deleteFile(String fileName){

		String formatName = fileName.substring(fileName.indexOf("_")+1);
		MediaType mType = MediaUtils.getMediaType(formatName);

		if(mType != null) {
			String front = fileName.substring(0,12);
			String end = fileName.substring(14);

			new File(uploadPath + (front+end).replace('/', File.separatorChar)).delete();
		}

		new File(uploadPath + fileName.replace('/', File.separatorChar)).delete();
		return new ResponseEntity<String>("deleted",HttpStatus.OK);
	}


}
